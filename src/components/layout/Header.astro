---
import Link from '../Link.astro';

const properties = Astro.props;

import { headers } from '..//header.ts';

type Props = {
	name: (typeof headers)[number]['name'];
	base?: string;
};

var header = headers.find((header) => header.name == properties.name);

const links = header?.links;
---

<header
	class="sticky top-[0] z-10 flex w-full flex-col items-end justify-end bg-white bg-opacity-80 py-2 backdrop-blur-md md:flex-col md:justify-center"
>
	<input type="checkbox" id="dropdown-toggle" class="peer hidden" />
	<label for="dropdown-toggle" class="py-2 pr-4 md:hidden">
		<svg
			class="h-4 w-4"
			aria-hidden="true"
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 17 14"
		>
			<path
				stroke="currentColor"
				stroke-linecap="round"
				stroke-linejoin="round"
				stroke-width="2"
				d="M1 1h15M1 7h15M1 13h15"></path>
		</svg>
	</label>

	<nav
		class="hidden w-full flex-col items-end justify-center gap-2 px-4 py-2 peer-checked:flex md:relative md:top-[0] md:flex md:flex-row md:items-center md:py-0"
	>
		{
			links?.map((link) => (
				<Link
					class={
						Astro.url.pathname == link.href
							? 'rounded-sm bg-black bg-opacity-10 px-4 py-2 text-caption font-bold text-black'
							: 'rounded-sm px-4 py-2 text-caption font-bold text-black hover:bg-black hover:bg-opacity-10'
					}
					href={
						Astro.url.pathname == link.href
							? null
							: properties.base
							? `${properties.base}${link.href}`
							: link.href
					}
				>
					{link.name}
				</Link>
			))
		}
	</nav>
</header>
